//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Player/Player_Input_G.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Input_G : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Input_G()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Input_G"",
    ""maps"": [
        {
            ""name"": ""Player_G"",
            ""id"": ""a379559a-6713-42b6-af23-e7e001d1991a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""32cb88cd-964a-4aeb-ba86-e131fdf452c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3db849c2-4842-47ee-92e1-8a21c48fe041"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""71300ee9-4a90-4d08-9ef5-79a01a838cb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Testing"",
                    ""type"": ""Button"",
                    ""id"": ""0d926eea-672e-4ad2-8def-ce59871041d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveTPPCam"",
                    ""type"": ""Value"",
                    ""id"": ""925a01a5-d315-4ad0-abf8-d3498a5bcb2e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""edc1f1a2-eb11-4550-a57d-7c3ce1aa2571"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveAirCam"",
                    ""type"": ""Value"",
                    ""id"": ""30f75245-3901-45f0-ac90-f41322ece6f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ff25c8cd-d04d-4c71-b877-82f6bca27809"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2f7fd614-e2b3-49c6-8000-7293a0a4a0a5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e0ec421-03aa-47a4-86c3-587c67e1343f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a7cec3a5-131f-4bbd-972b-83ffe2dd6b9e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf7ddf78-33e0-42de-9657-75d714edc275"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86f17b46-2c90-4e4c-8f4b-0d9bd5ac74e2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28f9ef9a-3879-40bd-90d2-c3d2909defa8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d00aa05d-6ea5-44e9-b807-32ec97a5347a"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Testing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e13fd10d-44df-49fb-be34-05b477ce428d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTPPCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b3f792d-a29f-442e-8ede-2c7e07711863"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5d5b06a1-308e-48ad-8654-9df81e75727a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAirCam"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0cab1ae4-4e7b-41e3-8945-f050a4195d16"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAirCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0a5ce632-0522-4585-8bfd-7990e61f1934"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAirCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8af3de0f-62f8-4980-ae7c-7660ef6640be"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAirCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5612db24-1799-4f2f-abd8-9ae617e97f26"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAirCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_G
        m_Player_G = asset.FindActionMap("Player_G", throwIfNotFound: true);
        m_Player_G_Move = m_Player_G.FindAction("Move", throwIfNotFound: true);
        m_Player_G_Jump = m_Player_G.FindAction("Jump", throwIfNotFound: true);
        m_Player_G_Shoot = m_Player_G.FindAction("Shoot", throwIfNotFound: true);
        m_Player_G_Testing = m_Player_G.FindAction("Testing", throwIfNotFound: true);
        m_Player_G_MoveTPPCam = m_Player_G.FindAction("MoveTPPCam", throwIfNotFound: true);
        m_Player_G_Zoom = m_Player_G.FindAction("Zoom", throwIfNotFound: true);
        m_Player_G_MoveAirCam = m_Player_G.FindAction("MoveAirCam", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_G
    private readonly InputActionMap m_Player_G;
    private IPlayer_GActions m_Player_GActionsCallbackInterface;
    private readonly InputAction m_Player_G_Move;
    private readonly InputAction m_Player_G_Jump;
    private readonly InputAction m_Player_G_Shoot;
    private readonly InputAction m_Player_G_Testing;
    private readonly InputAction m_Player_G_MoveTPPCam;
    private readonly InputAction m_Player_G_Zoom;
    private readonly InputAction m_Player_G_MoveAirCam;
    public struct Player_GActions
    {
        private @Player_Input_G m_Wrapper;
        public Player_GActions(@Player_Input_G wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_G_Move;
        public InputAction @Jump => m_Wrapper.m_Player_G_Jump;
        public InputAction @Shoot => m_Wrapper.m_Player_G_Shoot;
        public InputAction @Testing => m_Wrapper.m_Player_G_Testing;
        public InputAction @MoveTPPCam => m_Wrapper.m_Player_G_MoveTPPCam;
        public InputAction @Zoom => m_Wrapper.m_Player_G_Zoom;
        public InputAction @MoveAirCam => m_Wrapper.m_Player_G_MoveAirCam;
        public InputActionMap Get() { return m_Wrapper.m_Player_G; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_GActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_GActions instance)
        {
            if (m_Wrapper.m_Player_GActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_Player_GActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_GActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_GActionsCallbackInterface.OnJump;
                @Shoot.started -= m_Wrapper.m_Player_GActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_Player_GActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_Player_GActionsCallbackInterface.OnShoot;
                @Testing.started -= m_Wrapper.m_Player_GActionsCallbackInterface.OnTesting;
                @Testing.performed -= m_Wrapper.m_Player_GActionsCallbackInterface.OnTesting;
                @Testing.canceled -= m_Wrapper.m_Player_GActionsCallbackInterface.OnTesting;
                @MoveTPPCam.started -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMoveTPPCam;
                @MoveTPPCam.performed -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMoveTPPCam;
                @MoveTPPCam.canceled -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMoveTPPCam;
                @Zoom.started -= m_Wrapper.m_Player_GActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_Player_GActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_Player_GActionsCallbackInterface.OnZoom;
                @MoveAirCam.started -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMoveAirCam;
                @MoveAirCam.performed -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMoveAirCam;
                @MoveAirCam.canceled -= m_Wrapper.m_Player_GActionsCallbackInterface.OnMoveAirCam;
            }
            m_Wrapper.m_Player_GActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Testing.started += instance.OnTesting;
                @Testing.performed += instance.OnTesting;
                @Testing.canceled += instance.OnTesting;
                @MoveTPPCam.started += instance.OnMoveTPPCam;
                @MoveTPPCam.performed += instance.OnMoveTPPCam;
                @MoveTPPCam.canceled += instance.OnMoveTPPCam;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @MoveAirCam.started += instance.OnMoveAirCam;
                @MoveAirCam.performed += instance.OnMoveAirCam;
                @MoveAirCam.canceled += instance.OnMoveAirCam;
            }
        }
    }
    public Player_GActions @Player_G => new Player_GActions(this);
    public interface IPlayer_GActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnTesting(InputAction.CallbackContext context);
        void OnMoveTPPCam(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnMoveAirCam(InputAction.CallbackContext context);
    }
}
